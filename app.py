import streamlit as st
import json
# from google import genai
import google.generativeai as genai
from user_function import initialize_ai
import os
# importing necessary functions from dotenv library
from dotenv import load_dotenv, dotenv_values 
# loading variables from .env file
load_dotenv() 

# Load API key
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Kh·ªüi t·∫°o model
# model = "gemini-2.0-flash"
chat = genai.GenerativeModel('gemini-2.5-flash-preview-04-17')

# Giao di·ªán ch√≠nh
st.set_page_config(page_title="Gemini AI Assistant", page_icon="ü§ñ")
st.title("ü§ñ Gemini AI Assistant")

# L∆∞u session chat
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

if "start_conversation" not in st.session_state:
    st.session_state.start_conversation = True
    st.session_state.chat_history = initialize_ai()
    response = chat.generate_content(json.dumps(st.session_state.chat_history))
    st.session_state.chat_history.append({"role": "assistant", "content": response.text})

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for msg in st.session_state.chat_history:
    if msg["role"] != "system": # B·ªè qua ph·∫ßn instruction 
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

# Nh·∫≠n c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
user_input = st.chat_input("B·∫°n mu·ªën h·ªèi g√¨?")

if user_input:
    # Hi·ªÉn th·ªã c√¢u h·ªèi
    st.chat_message("user").markdown(user_input)
    st.session_state.chat_history.append({"role": "user", "content": user_input})

    # G·ª≠i ƒë·∫øn Gemini
    try:
        # G·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini
        # response = chat.generate_content(user_input)
        # comment the line above and uncomment this below line if you want chat bot can remember the history
        response = chat.generate_content(json.dumps(st.session_state.chat_history))
        assistant_reply = response.text

        # L∆∞u c√¢u tr·∫£ l·ªùi v√†o sessions
        # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
        st.chat_message("assistant").markdown(assistant_reply)
        st.session_state.chat_history.append({"role": "assistant", "content": assistant_reply})
    except Exception as e:
        # X·ª≠ l√Ω l·ªói n·∫øu c√≥
        st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
        assistant_reply = "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n."
        st.chat_message("assistant").markdown(assistant_reply)
        st.session_state.chat_history.append({"role": "assistant", "content": assistant_reply})
    # G·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini